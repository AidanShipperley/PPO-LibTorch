# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Linux Ubuntu-20.04 Build (LibTorch 2.2.2, CUDA 12.1.1)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  LIBTORCH_URL: https://download.pytorch.org/libtorch/cu121/libtorch-shared-with-deps-2.2.2%2Bcu121.zip

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v4

    - name: Install CUDA Toolkit
      uses: Jimver/cuda-toolkit@v0.2.15
      id: cuda-toolkit-linux
      with:
        cuda: '12.1.1'
        method: 'network'
        sub-packages: '["nvcc", "nvtx", "nvrtc", "cudart"]'

    - name: Verify CUDA Toolkit Installation
      run: |
        echo "Installed cuda version is: ${{steps.cuda-toolkit-linux.outputs.cuda}}"
        echo "Cuda install location: ${{steps.cuda-toolkit-linux.outputs.CUDA_PATH}}"
        nvcc -V
        cmake --version

    - name: Add CUDA Toolkit Paths
      run: |
        echo "CUDAToolkit_ROOT=${{ steps.cuda-toolkit-linux.outputs.CUDA_PATH }}" >> $GITHUB_ENV
        sudo ln -s ${{ steps.cuda-toolkit-linux.outputs.CUDA_PATH }}/lib64/libnvrtc.so.12.1.105 ${{ steps.cuda-toolkit-linux.outputs.CUDA_PATH }}/lib64/libnvrtc.so

    - name: Download and Install LibTorch
      run: |
        curl -L ${{ env.LIBTORCH_URL }} --output libtorch.zip
        unzip -q libtorch.zip -d libtorch
        sudo apt update
        sudo apt install libtbb-dev ninja-build
        echo "LibTorch_ROOT=$PWD/libtorch/libtorch" >> $GITHUB_ENV

    - name: Configure CMake
      run: |
        cmake --preset linux-release -DCUDAToolkit_ROOT=${{ env.CUDAToolkit_ROOT }} -DTORCH_CUDA_ARCH_LIST="8.0 8.6 8.9 9.0" -DCMAKE_PREFIX_PATH=${{ env.LibTorch_ROOT }}

    - name: Build
      run: |
        cd ./build/linux-release/
        cmake --build . --config ${{ env.BUILD_TYPE }}
