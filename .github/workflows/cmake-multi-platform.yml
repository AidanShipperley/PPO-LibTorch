# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Multi-OS Build with CMake and LibTorch

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-22.04, windows-2022]
        build_type: [Release]
        include:
          - os: windows-2022
            cuda_install: |
              choco install cuda --version=11.8.0.52206
            libtorch_url: https://download.pytorch.org/libtorch/cu118/libtorch-win-shared-with-deps-2.3.0%2Bcu118.zip
            cuda_root: "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.8"
          - os: ubuntu-22.04
            cuda_install: |
              wget -nv https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin
              sudo mv cuda-ubuntu2204.pin /etc/apt/preferences.d/cuda-repository-pin-600
              wget -nv https://developer.download.nvidia.com/compute/cuda/12.1.0/local_installers/cuda-repo-ubuntu2204-12-1-local_12.1.0-530.30.02-1_amd64.deb
              sudo dpkg -i cuda-repo-ubuntu2204-12-1-local_12.1.0-530.30.02-1_amd64.deb
              sudo cp /var/cuda-repo-ubuntu2204-12-1-local/cuda-*-keyring.gpg /usr/share/keyrings/
              sudo apt-get update
              sudo apt-get -y install cuda
            libtorch_url: https://download.pytorch.org/libtorch/cu121/libtorch-shared-with-deps-2.3.0%2Bcu121.zip
            cuda_root: /usr/local/cuda
    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install CUDA Toolkit
      run: ${{ matrix.cuda_install }}

    - name: Set CUDA Toolkit Path
      run: |
        echo "CUDAToolkit_ROOT=${{ matrix.cuda_root }}" >> $GITHUB_ENV
        if [[ ${{ runner.os }} == 'Linux' ]]; then
          echo "${{ matrix.cuda_root }}/bin" >> $GITHUB_PATH
          echo "${{ matrix.cuda_root }}/lib64" >> $GITHUB_PATH
        fi

    - name: Download and Install LibTorch
      run: |
        curl -L ${{ matrix.libtorch_url }} --output libtorch.zip
        if [[ ${{ runner.os }} == 'Linux' ]]; then
          unzip libtorch.zip -d libtorch
        else
          Expand-Archive -Path libtorch.zip -DestinationPath libtorch
        echo "LibTorch_ROOT=$PWD/libtorch" >> $GITHUB_ENV
        echo "$PWD/libtorch/bin" >> $GITHUB_PATH

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        mkdir build
        cd build
        cmake -DCUDAToolkit_ROOT=${{ env.CUDAToolkit_ROOT }} -DCMAKE_PREFIX_PATH=${{ env.LibTorch_ROOT }} --config ${{ matrix.BUILD_TYPE }} -S ..

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build . --config ${{ matrix.BUILD_TYPE }}
