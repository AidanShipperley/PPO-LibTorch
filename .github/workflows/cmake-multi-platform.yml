# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Multi-OS Build with CMake and LibTorch

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-20.04, windows-2019]
        build_type: [Release]
        include:
          - os: windows-2019
            libtorch_url: https://download.pytorch.org/libtorch/cu118/libtorch-win-shared-with-deps-2.2.2%2Bcu118.zip
          - os: ubuntu-20.04
            libtorch_url: https://download.pytorch.org/libtorch/cu121/libtorch-shared-with-deps-2.2.2%2Bcu121.zip
    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install CUDA Toolkit (Linux)
      uses: Jimver/cuda-toolkit@v0.2.15
      id: cuda-toolkit-linux
      with:
        cuda: '12.1.1'
        method: 'network'
        sub-packages: '["nvcc", "nvtx", "nvrtc", "cudart"]'
      if: runner.os != 'Windows'

    - name: Install CUDA Toolkit (Windows)
      uses: Jimver/cuda-toolkit@v0.2.15
      id: cuda-toolkit-windows
      with:
        cuda: '12.1.1'
        method: 'network'
        sub-packages: '["nvcc", "nvtx", "nvrtc", "cudart", "visual_studio_integration"]'
      if: runner.os == 'Windows'

    - name: Verify CUDA Toolkit Installation (Linux)
      run: |
        echo "Installed cuda version is: ${{steps.cuda-toolkit-linux.outputs.cuda}}"
        echo "Cuda install location: ${{steps.cuda-toolkit-linux.outputs.CUDA_PATH}}"
        nvcc -V
        cmake --version
      if: runner.os != 'Windows'
        
    - name: Verify CUDA Toolkit Installation (Windows)
      run: |
        echo "Installed cuda version is: ${{steps.cuda-toolkit-windows.outputs.cuda}}"
        echo "Cuda install location: ${{steps.cuda-toolkit-windows.outputs.CUDA_PATH}}"
        nvcc -V
        cmake --version
      if: runner.os == 'Windows'

    - name: Add CUDA Toolkit Paths (Linux)
      run: |
        ls ${{ steps.cuda-toolkit-linux.outputs.CUDA_PATH }}
        echo "${{ steps.cuda-toolkit-linux.outputs.CUDA_PATH }}/bin" >> $GITHUB_PATH
        echo "${{ steps.cuda-toolkit-linux.outputs.CUDA_PATH }}/lib64" >> $GITHUB_PATH
        echo "CUDAToolkit_ROOT=${{ steps.cuda-toolkit-linux.outputs.CUDA_PATH }}" >> $GITHUB_ENV
        ls ${{ steps.cuda-toolkit-linux.outputs.CUDA_PATH }}/lib64
        sudo ln -s ${{ steps.cuda-toolkit-linux.outputs.CUDA_PATH }}/lib64/libnvrtc.so.12.1.105 ${{ steps.cuda-toolkit-linux.outputs.CUDA_PATH }}/lib64/libnvrtc.so
        ls ${{ steps.cuda-toolkit-linux.outputs.CUDA_PATH }}/lib64
      if: runner.os != 'Windows'

    - name: Add CUDA Toolkit Paths (Windows)
      run: |
        ls "${{ steps.cuda-toolkit-windows.outputs.CUDA_PATH }}"
        echo "${{ steps.cuda-toolkit-windows.outputs.CUDA_PATH }}\bin" >> $GITHUB_PATH
        echo "${{ steps.cuda-toolkit-windows.outputs.CUDA_PATH }}\lib" >> $GITHUB_PATH
        echo "CUDAToolkit_ROOT=${{ steps.cuda-toolkit-windows.outputs.CUDA_PATH }}" | Out-File -Append -Encoding ASCII $env:GITHUB_ENV
      if: runner.os == 'Windows'

    - name: Download and Install LibTorch (Linux)
      run: |
        curl -L ${{ matrix.libtorch_url }} --output libtorch.zip
        unzip -q libtorch.zip -d libtorch
        sudo apt update
        sudo apt install libtbb-dev ninja-build
        echo "LibTorch_ROOT=$PWD/libtorch/libtorch" >> $GITHUB_ENV
        echo "$PWD/libtorch/libtorch/bin" >> $GITHUB_PATH
      if: runner.os != 'Windows'
      
    - name: Download and Install LibTorch (Windows)
      run: |
        Start-BitsTransfer -Source ${{ matrix.libtorch_url }} -Destination libtorch.zip
        Expand-Archive -Path libtorch.zip -DestinationPath libtorch
        echo "LibTorch_ROOT=$PWD\libtorch\libtorch" | Out-File -Append -Encoding ASCII $env:GITHUB_ENV
        $env:PATH = "$PWD\libtorch\libtorch\bin;" + $env:PATH
      if: runner.os == 'Windows'

    - name: Configure CMake (Linux)
      run: |
        find /usr -name libtbb*
        cmake --preset linux-release -DCUDAToolkit_ROOT=${{ env.CUDAToolkit_ROOT }} -DTORCH_CUDA_ARCH_LIST="8.0 8.6 8.9 9.0" -DCMAKE_PREFIX_PATH=${{ env.LibTorch_ROOT }}
      if: runner.os != 'Windows'

    - name: Configure CMake (Windows)
      run: |
        ls ${{ env.LibTorch_ROOT }}
        cmake --preset x64-release -DCUDAToolkit_ROOT=${{ env.CUDAToolkit_ROOT }} -DTORCH_CUDA_ARCH_LIST="8.0 8.6 8.9 9.0" -DCMAKE_PREFIX_PATH=${{ env.LibTorch_ROOT }}
      if: runner.os == 'Windows'

    - name: Build (Linux)
      run: |
        pwd
        ls
        cd ./build/linux-release/
        pwd
        ls
        cmake --build . --config ${{ matrix.BUILD_TYPE }}

    - name: Build (Windows)
      run: |
        pwd
        ls
        cd .\build\x64-release\
        pwd
        ls
        cmake --build . --config ${{ matrix.BUILD_TYPE }}
