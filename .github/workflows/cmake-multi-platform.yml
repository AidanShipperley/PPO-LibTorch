# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Multi-OS Build with CMake and LibTorch

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-20.04, windows-2019]
        build_type: [Release]
        include:
          - os: windows-2019
            libtorch_url: https://download.pytorch.org/libtorch/cu118/libtorch-win-shared-with-deps-2.2.2%2Bcu118.zip
          - os: ubuntu-20.04
            libtorch_url: https://download.pytorch.org/libtorch/cu121/libtorch-shared-with-deps-2.2.2%2Bcu121.zip
    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install CUDA Toolkit
      uses: Jimver/cuda-toolkit@v0.2.15
      id: cuda-toolkit
      with:
        cuda: '12.1.1'
        method: 'network'
        sub-packages: '["nvcc"]'

    - name: Verify CUDA Toolkit Installation
      run: |
        echo "Installed cuda version is: ${{steps.cuda-toolkit.outputs.cuda}}"
        echo "Cuda install location: ${{steps.cuda-toolkit.outputs.CUDA_PATH}}"
        nvcc -V

    - name: Set CUDA Toolkit Path
      run: |
        echo "CUDAToolkit_ROOT=${{ steps.cuda-toolkit.outputs.CUDA_PATH }}" >> $GITHUB_ENV

    - name: Set CUDA Toolkit Path (Extra Linux Step)
      run: |
        echo "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}/bin" >> $GITHUB_PATH
        echo "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}/lib64" >> $GITHUB_PATH
      if: runner.os != 'Windows'

    - name: Download and Install LibTorch (Linux)
      run: |
        curl -L ${{ matrix.libtorch_url }} --output libtorch.zip
        unzip libtorch.zip -d libtorch
        echo "LibTorch_ROOT=$PWD/libtorch" >> $GITHUB_ENV
        echo "$PWD/libtorch/bin" >> $GITHUB_PATH
      if: runner.os != 'Windows'
      
    - name: Download and Install LibTorch (Windows)
      run: |
        Start-BitsTransfer -Source ${{ matrix.libtorch_url }} -Destination libtorch.zip
        Expand-Archive -Path libtorch.zip -DestinationPath libtorch
        echo "LibTorch_ROOT=$PWD/libtorch" | Out-File -Append -Encoding ASCII $env:GITHUB_ENV
        $env:PATH = "$PWD/libtorch/bin;" + $env:PATH
      if: runner.os == 'Windows'

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        mkdir build
        cd build
        cmake -DCUDAToolkit_ROOT=${{ env.CUDAToolkit_ROOT }} -DCMAKE_PREFIX_PATH=${{ env.LibTorch_ROOT }} ..

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build . --config ${{ matrix.BUILD_TYPE }}
